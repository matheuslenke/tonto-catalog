import Core

package Class

subkind Generic_Class of functional-complexes  specializes Class 

kind Type_Parameter{
    @componentOf [1..*] -- [1] Generic_Class 
}

subkind Concrete_Class of functional-complexes  specializes Class 

subkind Abstract_Class of functional-complexes  specializes Class, Extendable_Class 

subkind NonExtendable_Class of functional-complexes  specializes Class 

subkind Extendable_Class of functional-complexes  specializes Class 

subkind Root_Class of functional-complexes  specializes Extendable_Class 

role Superclass of functional-complexes  specializes Extendable_Class {
    [1..*] -- inherited_in -- [1..*] Inheritance 
}

role Subclass of functional-complexes  specializes Class {
    [1] -- inherits_in -- [1] Inheritance 
}

relator Nesting

relator Inheritance

role Nested_Class of functional-complexes  specializes Class {
    [1] -- nested_in -- [1] Nesting 
}

quality Inheritance_Visibility{
    @characterization [0..1] -- characterized_by -- [1] Inheritance 
}

genset Parametrization {
    general Class
    specifics Generic_Class
}

genset Implementation {
    general Class
    specifics Concrete_Class, Abstract_Class
}

genset Extension {
    general Class
    specifics Extendable_Class, NonExtendable_Class
}

genset Inheritance {
    general Class
    specifics Subclass
}

