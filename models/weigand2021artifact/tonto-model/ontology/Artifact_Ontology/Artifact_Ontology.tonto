import ontology

package Artifact_Ontology

historicalRoleMixin Maker of functional-complexes  specializes Agent 

category Agent of functional-complexes 

mode Intention

event Testing

event Making

historicalRoleMixin Source of functional-complexes  specializes Physical_Object 

category Physical_Object of functional-complexes 

roleMixin Result of functional-complexes  specializes Physical_Object 

roleMixin Technical_object of functional-complexes  specializes Result, Instrument {
    @creation 
    [1..*] -- [1..*] Making 
    @participation 
    [1..*] -- [1..*] Testing 
    @characterization 
    [1..*] -- [1..*] Capacities 
}

quality Capacity

historicalRoleMixin User of functional-complexes  specializes Agent 

event Usage

situation Usage_condition

event Using

situation Use_condition

class Field specializes Proposition 

quality Capacities

roleMixin Instrument of functional-complexes 

event Observation

roleMixin Material_source of functional-complexes  specializes Instrument {
    @characterization 
    [1..*] -- [1..*] Capacities 
}

class Proposition of abstract-individuals 

class Practice specializes Proposition 

situation Usage_effect

situation Use_effect

historicalRoleMixin Designer of functional-complexes  specializes Agent 

phaseMixin Planned of functional-complexes  specializes Technical_object {
    @creation 
    [1] -- [1] Testing 
    @creation 
    [1..*] -- [1..*] Making 
    @participation 
    [1..*] -- [1..*] Testing 
    @characterization 
    [1..*] -- [1..*] Capacities 
}

phaseMixin In_production of functional-complexes  specializes Technical_object {
    @creation 
    [1] -- [1] Testing 
    @creation 
    [1..*] -- [1..*] Making 
    @participation 
    [1..*] -- [1..*] Testing 
    @characterization 
    [1..*] -- [1..*] Capacities 
}

phaseMixin Employed of functional-complexes  specializes Technical_object {
    @creation 
    [1] -- [1] Testing 
    @creation 
    [1..*] -- [1..*] Making 
    @participation 
    [1..*] -- [1..*] Testing 
    @characterization 
    [1..*] -- [1..*] Capacities 
}

phaseMixin Disposed of functional-complexes  specializes Technical_object {
    @creation 
    [1] -- [1] Testing 
    @creation 
    [1..*] -- [1..*] Making 
    @participation 
    [1..*] -- [1..*] Testing 
    @characterization 
    [1..*] -- [1..*] Capacities 
}

phaseMixin In_distribution of functional-complexes  specializes Employed {
    @historicalDependence 
    [0..*] -- [1] In_production 
    @creation 
    [1] -- [1] Testing 
    @creation 
    [1..*] -- [1..*] Making 
    @participation 
    [1..*] -- [1..*] Testing 
    @characterization 
    [1..*] -- [1..*] Capacities 
}

phaseMixin In_use of functional-complexes  specializes Employed {
    @historicalDependence 
    [0..*] -- [1] In_production 
    @creation 
    [1] -- [1] Testing 
    @creation 
    [1..*] -- [1..*] Making 
    @participation 
    [1..*] -- [1..*] Testing 
    @characterization 
    [1..*] -- [1..*] Capacities 
}

phaseMixin In_maintenance of functional-complexes  specializes Employed {
    @historicalDependence 
    [0..*] -- [1] In_production 
    @creation 
    [1] -- [1] Testing 
    @creation 
    [1..*] -- [1..*] Making 
    @participation 
    [1..*] -- [1..*] Testing 
    @characterization 
    [1..*] -- [1..*] Capacities 
}

event Design_conversation

category Object_Description of functional-complexes  specializes Normative_Description 

category Normative_Description of functional-complexes 

category Plan_Description of functional-complexes  specializes Normative_Description 

type Artifact_variant specializes Artifact_universal 

category Design_object of functional-complexes  specializes Object_Description 

type Artifact_universal

category Artefact_design of relators  specializes Plan_Description 

roleMixin Artifact of functional-complexes  specializes Technical_object {
    @creation 
    [1] -- [1] Testing 
    @creation 
    [1..*] -- [1..*] Making 
    @participation 
    [1..*] -- [1..*] Testing 
    @characterization 
    [1..*] -- [1..*] Capacities 
}

type Capacity_universal

class Make_goal specializes Capacity_universal 

category Make_plan of functional-complexes 

type Make_process specializes Complex_Action_Universal 

category Use_plan of functional-complexes 

class Use_goal specializes Proposition 

type Complex_Action_Universal

event Directive_actagenic specializes Communicative_acts {
    @componentOf 
    [1..*] -- [1] Design_conversation 
    @historicalDependence 
    [0..*] -- warrant -- [1..*] Observation 
}

type Use_process specializes Complex_Action_Universal 

event Communicative_acts

event Assertive_factagenic specializes Communicative_acts {
    @componentOf 
    [1..*] -- [1] Design_conversation 
    @historicalDependence 
    [0..*] -- warrant -- [1..*] Observation 
}

