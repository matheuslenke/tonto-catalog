package DigitalDoctor

kind Person  specializes NamedEntity{
    firstName : string
    lastName : string
    birthdate : undefined
    gender : boolean
    SSN : string
}
subkind User  specializes Person{
    username : string
    contactPoint : ContactPoint
}
role Patient  specializes User{
    @material
    [1] -- has -- [1]  MedicalHistory( {const } )
}
role Doctor  specializes User{
    @mediation
    ( {const } doctors ) [1..*] -- [*]  MedicalProcedure( {const } ) specializes SpecialistDoctor.
}
subkind Symptom  specializes PatientReport{
    symptom : SymptomEnum
    subjectiveRating : Rating
    medicalRating : Rating
    symptomStart : Date
    symptomWorsening : undefined
    finalRating : Rating
}
phase MildSymptom  specializes Symptom
phase SevereSymptom  specializes Symptom, MedicalProcedureTrigger
collective MedicalHistory  specializes NamedEntity{
    observation : string
}
relator MedicalProcedure  specializes NamedEntity{
    address : Address
    date : Date
    patientPreparation : string
    @mediation
    [*] -- [1]  TreatmentPatient( {const } ) specializes SpecialistMedicalProcedure.
    @material
    [1] -- triggeredBy -- [1]  MedicalProcedureTrigger( {const } )
    @material
    [1] -- resultsIn --  [1..*]  MedicalProcedureOutcome( {const } )
    @componentOf
     [1..*]  --<o> [1]  MedicalHistory
    @derivation
    [1] -- [1]  treatedBy
}
subkind TherapeuticProcedure  specializes PresenceMedicalProcedure, RemoteMedicalProcedure
subkind PalliativeProcedure  specializes PresenceMedicalProcedure
subkind PhysicalExam  specializes PresenceMedicalProcedure{
    bodyLocation : string
}
subkind SurgicalProcedure  specializes PresenceMedicalProcedure{
    bodyLocation : string
    typeOfAnaesthesia : string
}
subkind DiagnosticProcedure  specializes PresenceMedicalProcedure, RemoteMedicalProcedure{
    diagnosisMethod : undefined
}
kind DoseSchedule  specializes NamedEntity{
    doseUnit : string
    doseValue : float
    doseFrequency : string
}
kind Drug  specializes NamedEntity{
    prescriptionRequired : undefined
    isAvailableGenerically : undefined
    alcoholWarning : string
    foodWarning : string
    pregnancyWarning : string
    breastfeedingWarning : string
}
category NamedEntity {
    name : string
    description : string
}
datatype Date {
    date : string
    time : string
}
datatype Address {
    street : string
    city : string
    region : string
    country : string
    category : string
    zipcode : string
    complement : string
}
datatype MedicalSpeciality {
}
datatype ContactPoint {
    telephone : string
    email : string
    address : Address
}
datatype HoursSpecification {
    dayOfWeek : string
    startTime : float
    endTime : float
}
relator Prescription  specializes NamedEntity{
    @mediation
    [1] --  [1..*]  PrescribedDrug( {const } )
    @mediation
    [1] --  [1..*]  PrescribedDoseSchedule( {const } )
    @componentOf
    [1]  --<o> [1]  TherapeuticProcedure
}
mixin MedicalProcedureTrigger 
subkind VisitRequest  specializes MedicalProcedureTrigger, PatientReport
subkind PreviousIllness  specializes MedicalProcedureTrigger, MedicalCondition{
    discoveryDate : Date
    healingDate : Date
    @componentOf
     [1..*]  --<o> [1]  MedicalHistory
}
kind MedicalProcedureOutcome  specializes NamedEntity{
    remark : string
    expiryDate : Date
    date : Date
    severity_rating : Rating
    @componentOf
     [1..*]  --<o> [1]  MedicalHistory
}
role SpecialistDoctor  specializes Doctor{
    speciality : MedicalSpeciality
    @mediation
    ( {const } specialistDoctors ) [1..*] -- [*]  SpecialistMedicalProcedure( {const } )
}
role GeneralPractitioner  specializes Doctor{
    @mediation
    ( {const } generalPractitioner )[1] -- [*]  PatientReport( {const } )
}
relator PatientReport  specializes NamedEntity{
    date : Date
    comment : string
    @mediation
     [1..*] -- [1]  ReportingPatient( {const } )
    @componentOf
     [1..*]  --<o> [1]  MedicalHistory
}
enum SymptomEnum {
    Headache,
    Fever,
    Dizzy,
    Impaired_Memory,
    Skin_Changes,
    Swelling,
    Painful_Swallowing,
    Sore_Throat,
    Cough,
    Hoarse_Voice,
    Itch,
    Shortness_of_Breath,
    Pain_in_Neck,
    Enlarged_Lymph_Nodes,
    Chest_Pain,
    Heartburn,
    Palpitations,
    Fast_Heart_Rate,
    Slow_Heart_Rate,
    Stomach_Pain,
    Vomiting,
    Indigestion,
    Weight_Loss,
    Diarrhea,
    Black_Stools,
    Red_Stools,
    Pain_When_Moving,
    Back_Pain,
    Leg_Pain,
    Cramps,
    Skin_Rash_or_Discoloration,
    Numbness,
    Injury,
    Other
}
enum Rating {
    Negligible,
    Minimal,
    Significant,
    Serious,
    Severe,
    Very_Severe
}
subkind RemoteMedicalProcedure  specializes MedicalProcedure
subkind PresenceMedicalProcedure  specializes MedicalProcedure
role SpecialistMedicalProcedure  specializes PresenceMedicalProcedure{
    @mediation
    [*] -- [1]  TreatmentPatient( {const } )
}
phase SevereOutcome  specializes MedicalProcedureOutcome, MedicalProcedureTrigger
phase NonSevereOutcome  specializes MedicalProcedureOutcome
subkind Diagnosis  specializes MedicalProcedureOutcome{
    @material
    [1] -- leadsTo --  [1..*]  MedicalCondition( {const } )
}
kind MedicalCondition  specializes NamedEntity{
    stage : MedicalConditionStage
}
enum MedicalConditionStage {
    Undetermined,
    Good,
    Fair,
    Serious,
    Critical,
    Treated,
    Patient_Death
}
enum DiagnosisMethod {
    Blood_Analysis,
    Urine_Analysis,
    Stool_Analysis,
    CT,
    MRI,
    Ultrasound,
    PET,
    ECG,
    Other
}
role ReportingPatient  specializes Patient{
    @material
     [1..*] -- reportTo -- [1]  GeneralPractitioner
}
role TreatmentPatient  specializes ReportingPatient{
    @material
     [1..*] -- treatedBy --  [1..*]  Doctor specializes TreatmentPatient.treatedBy
    @material
     [1..*] -- treatedBy_redefines_doctor --  [1..*]  GeneralPractitioner
    @material
     [1..*] -- treatedBy --  [1..*]  SpecialistDoctor
}
role PrescribedDrug  specializes Drug
role PrescribedDoseSchedule  specializes DoseSchedule{
    @material
    [1] -- [1]  PrescribedDrug
}
disjoint complete genset UserRole{
    general User
    specifics Doctor, Patient 
}
disjoint complete genset Severity{
    general Symptom
    specifics SevereSymptom, MildSymptom 
}
disjoint complete genset ReportType{
    general PatientReport
    specifics Symptom, VisitRequest 
}
complete genset DoctorType{
    general Doctor
    specifics SpecialistDoctor, GeneralPractitioner 
}
genset ProcedureType{
    general PresenceMedicalProcedure
    specifics PalliativeProcedure, DiagnosticProcedure, PhysicalExam, TherapeuticProcedure, SurgicalProcedure 
}
disjoint complete genset Severity{
    general MedicalProcedureOutcome
    specifics NonSevereOutcome, SevereOutcome 
}
complete genset RemoteProcedureType{
    general RemoteMedicalProcedure
    specifics DiagnosticProcedure, TherapeuticProcedure 
}
genset MedicalProcedureMode{
    general MedicalProcedure
    specifics PresenceMedicalProcedure, RemoteMedicalProcedure 
}

