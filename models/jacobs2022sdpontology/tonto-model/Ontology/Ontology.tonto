
package Ontology

category Resource of functional-complexes {
    resource: Resources  
}

kind Story

subkind Program_increment of functional-complexes  specializes Software_development_project {
     --  Epic 
    [3] --  Sprint 
}

kind Platform{
    platform: Platforms  
    [1..*] -- can_be_used_for --  Programming_environment 
}

kind Epic{
     --  Story 
}

kind Program{
     -- [0..1] Software_development_project 
     --  Program_increment 
}

kind Sprint{
     --  Story 
}

kind Compiler{
     --  Programming_environment 
}

kind Programming_framework{
    [0..1] --  Programming_environment 
}

quality Quality_attribute{
    type_: Attributes  
    Qlevel: Quality_Levels  
}

role Employee of functional-complexes  specializes Person {
    availability: int  
    General_experience_level: Experience_Levels  
     -- [1..*] Proficiency_level 
}

kind Programming_langauge{
     --  Quality_attribute 
    [1] --  Programming_environment 
}

kind Software_development_project{
    effort: undefined  
    type_of_project: Types  
    Architectural_style: Architectural_styles  
    development_method: Methods  
     -- [0..*] Nonfunctional_Requirement 
     -- [1..*] Platform 
    [1..*] --  Resource 
    [1] -- developed_using --  Programming_environment 
}

kind Programming_environment specializes Resource {
    type_of_project: Types  
}

relator Membership{
     --  Employee 
     --  Team 
}

kind Team specializes Resource {
    [1] -- developed_by --  Software_development_project 
     --  Employee 
}

role Business_Role of functional-complexes  specializes Role {
    role_: Roles  
     --  Membership 
     --  Team 
}

kind Proficiency_level{
    Plevel: Proficiency_Levels  
    language: Programming_langauge  
}

kind Person

kind Role

quality Nonfunctional_Requirement{
    requirement: Requirements  
    importance: Importance_levels  
}

datatype int
