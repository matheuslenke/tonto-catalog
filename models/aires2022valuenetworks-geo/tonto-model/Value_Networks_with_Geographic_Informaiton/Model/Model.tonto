package Model

class DeclaredValue {
    [*] -- isDeclaredBy -- [1]  Consumer
}
kind Consumer  specializes Actor{
    @material
     [1..*] -- consumes -- [1]  EndProduct
    @material
     [1..*] -- delivers --  [1..*]  CounterObject
}
category Actor {
    [1] -- hasResponsibility --  [1..*]  ValueActivity
     [1..*]  --<o> [*]  Policy
}
relator ConsumerNeed {
    @mediation
     [1..*] -- [1]  BusinessNeed( {const } )
    @mediation
     [1..*] -- [1]  Consumer( {const } )
    @derivation
    [1] -- [1]  isDemandedBy
}
kind BusinessNeed {
    @material
     [1..*] -- isDemandedBy --  [1..*]  Consumer
}
class ProvenanceEvaluation {
    @structuration
    [1] -- hasDeclaredValue -- [1]  DeclaredValue
    [*] -- isDeclaredBy -- [1]  Consumer
    @characterization
     [1..*] -- isSubjectiveValueOf -- [1]  Provenance( {const } )
}
category ValueActivity {
     [1..*] -- transforms --  [1..*]  ValueObject
     [1..*]  --<o> [*]  Policy
}
kind Provenance  specializes ValueObject{
    @componentOf
    [1]  -- satisfies --<o>  [1..*]  BusinessNeed
}
subkind DeclaredProvenance  specializes Provenance
subkind GeographicIndication  specializes Provenance
kind EndProduct  specializes ValueObject{
     [1..*] -- hasObjectiveValue --  [0..1]  GeographicIndication
    @componentOf
    [1]  -- satisfies --<o>  [1..*]  BusinessNeed
     [1..*] -- hasObjectiveValue -- [1]  Provenance
     [1..*] -- stockFlow --  [1..*]  Sale
}
kind RawProduct  specializes ValueObject{
     [1..*] -- hasObjectiveValue --  [0..1]  DeclaredProvenance
     [1..*] -- hasObjectiveValue --  [0..1]  GeographicIndication
    @componentOf
     [2..*]  --<o> [1]  EndProduct
     [1..*] -- hasObjectiveValue -- [1]  Provenance
    [1] -- stockFlow --  [1..*]  Purchase
}
category ValueObject {
     [1..*]  --<o> [*]  Policy
}
relator Production  specializes ValueActivity{
     [1..*] -- consumes -- [1]  RawProduct
     [1..*] -- produces -- [1]  EndProduct
    [1] -- [1]  Agent
    @derivation
    [1] -- [1]  manages
}
kind Agent  specializes Actor{
    @material
     [1..*] -- manages --  [1..*]  RawProduct
    @material
     [1..*] -- bundles --  [1..*]  RawProduct
    @material
    [1] -- manages --  [1..*]  EndProduct
    @material
    [1] -- provides --  [1..*]  EndProduct
    @material
    [1] -- delivers --  [1..*]  CounterObject
    @material
    [1] -- bundles --  [1..*]  CounterObject
    [1] --  [1..*]  Payment
}
relator Purchase  specializes ValueActivity{
     [1..*] -- [1]  Provider
     [1..*] -- [1]  Agent
    [*] -- duality -- [*]  Payment
}
relator Payment  specializes ValueActivity{
     [1..*] -- [1]  Provider
}
kind Provider  specializes Actor{
    @material
     [1..*] -- provides --  [1..*]  RawProduct
    @material
     [1..*] -- consumes --  [1..*]  CounterObject
}
kind CounterObject  specializes ValueObject{
    [1] -- stockFlow -- [1]  Payment
    [1] -- stockFlow --  [1..*]  Receipt
}
relator Receipt  specializes ValueActivity{
    [*] -- [1]  Agent
     [1..*] -- [1]  Consumer
    @derivation
    [1] -- [1]  bundles
}
relator Sale  specializes ValueActivity{
    [*] -- duality -- [*]  Receipt
     [1..*] -- [1]  Agent
     [1..*] -- [1]  Consumer
}
kind Policy 
disjoint genset 7ruhbf6GAqACB38Y{
    general Provenance
    specifics DeclaredProvenance, GeographicIndication 
}
disjoint genset zBPhbf6GAqACB3_Q{
    general ValueObject
    specifics EndProduct, RawProduct, Provenance 
}
disjoint genset HDik7f6AUB0C9IYb{
    general ValueActivity
    specifics Purchase, Production, Sale, Payment, Receipt 
}

