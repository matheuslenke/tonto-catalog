import Value_Networks_with_Geographic_Informaiton

package Model

class DeclaredValue

kind Consumer specializes Actor {
    [1] -- hasResponsibility -- [1..*] ValueActivity 
    [1..*] -- [*] Policy 
}

category Actor of functional-complexes 

relator ConsumerNeed

kind BusinessNeed

class ProvenanceEvaluation

category ValueActivity of relators 

kind Provenance specializes ValueObject {
    [1..*] -- [*] Policy 
}

subkind DeclaredProvenance of functional-complexes  specializes Provenance {
    @componentOf 
    [1] -- satisfies -- [1..*] BusinessNeed 
    [1..*] -- [*] Policy 
}

subkind GeographicIndication of functional-complexes  specializes Provenance {
    @componentOf 
    [1] -- satisfies -- [1..*] BusinessNeed 
    [1..*] -- [*] Policy 
}

kind EndProduct specializes ValueObject {
    [1..*] -- [*] Policy 
}

kind RawProduct specializes ValueObject {
    [1..*] -- [*] Policy 
}

category ValueObject of functional-complexes 

relator Production specializes ValueActivity {
    [1..*] -- transforms -- [1..*] ValueObject 
    [1..*] -- [*] Policy 
}

kind Agent specializes Actor {
    [1] -- hasResponsibility -- [1..*] ValueActivity 
    [1..*] -- [*] Policy 
}

relator Purchase specializes ValueActivity {
    [1..*] -- transforms -- [1..*] ValueObject 
    [1..*] -- [*] Policy 
}

relator Payment specializes ValueActivity {
    [1..*] -- transforms -- [1..*] ValueObject 
    [1..*] -- [*] Policy 
}

kind Provider specializes Actor {
    [1] -- hasResponsibility -- [1..*] ValueActivity 
    [1..*] -- [*] Policy 
}

kind CounterObject specializes ValueObject {
    [1..*] -- [*] Policy 
}

relator Receipt specializes ValueActivity {
    [1..*] -- transforms -- [1..*] ValueObject 
    [1..*] -- [*] Policy 
}

relator Sale specializes ValueActivity {
    [1..*] -- transforms -- [1..*] ValueObject 
    [1..*] -- [*] Policy 
}

kind Policy

