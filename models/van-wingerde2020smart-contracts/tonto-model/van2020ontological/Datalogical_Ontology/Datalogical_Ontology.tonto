package Datalogical_Ontology

class Value {
    [1] -- has -- [1]  Key
}
class Key {
    [1] -- has -- [1]  State_Variable
}
kind State_Variable {
     [0..*] -- modifies --  [0..*]  Function
     [0..*] -- points_to --  [0..*]  Data_Object
}
relator Contract_Storage {
    [*] <o>-- contains -- [*]  State_Variable
    [1] -- has -- [1]  Smart_Contract
}
relator Smart_Contract {
    [*] <o>-- [*]  Function
    [1] -- emits --  [0..*]  Event
    [1] -- addressed_to --  [0..*]  Transaction
}
mode Function {
     [1..*] -- has_imput --  [0..*]  Payload
}
kind Data_Object 
kind Offchain_Storage {
    [*] <>-- [*]  Data_Object
}
event Event {
     [1..*] -- logged_in -- [1]  Transaction_Trie
}
kind Transaction_Trie 
kind Transaction {
     [0..*] -- initiates --  [1..*]  Account_Wallet
}
kind Block {
    [*] <o>-- stored_in -- [*]  Transaction
    [1] -- has -- [1]  Transaction_Trie
}
class Payload {
     [0..1] -- has -- [1]  Transaction
}
collective Blockchain {
    [*] <o>-- stored_in -- [*]  Block
}
kind Account_Wallet {
     [0..*] -- controls --  [1..*]  External_Actor
}
subkind External_Actor 

