import UFO
import COVER

package Model

event Player_Action {
     [0..*] -- motivated_by -- [1]  Intention
    @participational
    ( {const } ) [2..*]  --<o> [1]  Action_Profile( {const } )
}
roleMixin Game_Player  specializes Agent{
    @participation
    ( {const } )[1] -- performs_action --  [0..*]  Player_Action
}
event Action_Profile  specializes Value_Event{
    [1]  --<o>  [1..*]  Outcome
}
event Outcome  specializes Value_Experience
relator Game {
    @mediation
     [1..*] -- participates --  [2..*]  Game_Player( {const } )
    [1] -- involves --  [1..*]  Outcome
}
mode Unity_Value_Ascription {
     [2..*]  --<o>  [1..*]  Utility
    @characterization
     [1..*] -- inheres_in -- [1]  Game_Player( {const } )
    @externalDependence
     [1..*] -- ext_dep_on --  [1..*]  Outcome( {const } )
}
mode Utility {
    @characterization
     [1..*] -- inheres_in -- [1]  Game_Player( {const } )
}
quality Utility_Value {
    @characterization
    [1] -- inheres_in -- [1]  Unity_Value_Ascription( {const } )
}
datatype Utility_Value_Magnitude
situation Successful_Situation  specializes Resulting_Situation

